install.packages('VennDiagram')
library(plotrix)
obs = runif(100,1,100)
mod1 = runif(100,1,100)
mod2 = runif(100,1,100)
mod3 = runif(100,1,100)
taylor.diagram(obs,mod1)
taylor.diagram(obs,mod2,add=TRUE)
taylor.diagram(obs,mod3,add=TRUE)
taylor.bias <- function(ref, model, normalize = FALSE){
R <- cor(model, ref, use = "pairwise")
sd.f <- sd(model)
sd.r <- sd(ref)
m.f <- mean(model)
m.r <- mean(ref)
## normalize if requested
if (normalize) {
m.f <- m.f/sd.r
m.r <- m.r/sd.r
sd.f <- sd.f/sd.r
sd.r <- 1
}
## calculate bias
bias <- m.f - m.r
## coordinates for model and observations
dd <- rbind(mp = c(sd.f * R, sd.f * sin(acos(R))), rp = c(sd.r, 0))
## find equation of line passing through pts
v1 <- solve(cbind(1, dd[,1])) %*% dd[,2]
## find perpendicular line
v2 <- c(dd[1,2] + dd[1,1]/v1[2], -1/v1[2])
## find point defined by bias
nm <- dd[1,] - c(0, v2[1])
nm <- nm / sqrt(sum(nm^2))
bp <- dd[1,] + bias*nm
## plot lines
arrows(x0 = dd[1,1], x1 = bp[1], y0 = dd[1,2], y1 = bp[2], col = "red", length = 0.05, lwd = 1.5)
lines(rbind(dd[2,], bp), col = "red", lty = 3)
lines(dd, col = "red", lty = 3)
}
library(plotrix)
obs = runif(100,1,100)
mod1 = runif(100,1,100)
taylor.diagram(obs,mod1)
taylor.bias(obs,mod1)
taylor.diagram.modified <- function (ref, model, add = FALSE, col = "red",
pch = 19, pos.cor = TRUE, xlab = "", ylab = "",
main = "Taylor Diagram", show.gamma = TRUE,
ngamma = 3, gamma.col = 8, sd.arcs = 0, ref.sd = FALSE,
grad.corr.lines = c(0.2, 0.4, 0.6, 0.8, 0.9), pcex = 1,
cex.axis = 1, normalize = FALSE, mar = c(5, 4, 6, 6),
text, ...) #the added parameter
{
grad.corr.full <- c(0, 0.2, 0.4, 0.6, 0.8, 0.9, 0.95, 0.99,1)
R <- cor(ref, model, use = "pairwise")
sd.r <- sd(ref)
sd.f <- sd(model)
if (normalize) {
... #I didn't copy here the full function because it's quite long: to obtain it
... #simply call `taylor.diagram` in the console or `edit(taylor.diagram)`.
}
S <- (2 * (1 + R))/(sd.f + (1/sd.f))^2
}
}
points(sd.f * R, sd.f * sin(acos(R)), pch = pch, col = col,
cex = pcex)
text(sd.f * R, sd.f * sin(acos(R)),  #the line to add
labels=text, cex = pcex, pos=3) #You can change the pos argument to your liking
invisible(oldpar)
}
taylor.diagram.modified <- function (ref, model, add = FALSE, col = "red",
pch = 19, pos.cor = TRUE, xlab = "", ylab = "",
main = "Taylor Diagram", show.gamma = TRUE,
ngamma = 3, gamma.col = 8, sd.arcs = 0, ref.sd = FALSE,
grad.corr.lines = c(0.2, 0.4, 0.6, 0.8, 0.9), pcex = 1,
cex.axis = 1, normalize = FALSE, mar = c(5, 4, 6, 6),
text, ...) #the added parameter
{
grad.corr.full <- c(0, 0.2, 0.4, 0.6, 0.8, 0.9, 0.95, 0.99,1)
R <- cor(ref, model, use = "pairwise")
sd.r <- sd(ref)
sd.f <- sd(model)
if (normalize) {
... #I didn't copy here the full function because it's quite long: to obtain it
... #simply call `taylor.diagram` in the console or `edit(taylor.diagram)`.
}
S <- (2 * (1 + R))/(sd.f + (1/sd.f))^2
}
}
points(sd.f * R, sd.f * sin(acos(R)), pch = pch, col = col,
cex = pcex)
text(sd.f * R, sd.f * sin(acos(R)),  #the line to add
labels=text, cex = pcex, pos=3) #You can change the pos argument to your liking
invisible(oldpar)
}
likert_6 <- data.frame(as.factor(sample(1:6, 500, replace=T, prob=c(0.2,0.1,0.1,0.3,0.2,0.1))),
as.factor(sample(1:6, 500, replace=T, prob=c(0.15,0.15,0.3,0.1,0.1,0.2))),
as.factor(sample(1:6, 500, replace=T, prob=c(0.2,0.25,0.05,0.2,0.2,0.2))),
as.factor(sample(1:6, 500, replace=T, prob=c(0.2,0.1,0.1,0.4,0.1,0.1))),
as.factor(sample(1:6, 500, replace=T, prob=c(0.1,0.4,0.1,0.3,0.05,0.15))))
levels_6 <- list(c("Very strongly disagree", "Strongly disagree", "Disagree", "Agree", "Strongly Agree", "Very strongly agree"))
items <- list(c("Q1", "Q2", "Q3", "Q4", "Q5"))
source("sjPlotLikert.R")
sjp.likert(likert_6, legendLabels=levels_6, barColor="brown", axisLabels.x=items, orderBy="pos")
likert_6 <- data.frame(as.factor(sample(1:6, 500, replace=T, prob=c(0.2,0.1,0.1,0.3,0.2,0.1))),
as.factor(sample(1:6, 500, replace=T, prob=c(0.15,0.15,0.3,0.1,0.1,0.2))),
as.factor(sample(1:6, 500, replace=T, prob=c(0.2,0.25,0.05,0.2,0.2,0.2))),
as.factor(sample(1:6, 500, replace=T, prob=c(0.2,0.1,0.1,0.4,0.1,0.1))),
as.factor(sample(1:6, 500, replace=T, prob=c(0.1,0.4,0.1,0.3,0.05,0.15))))
levels_6 <- list(c("Very strongly disagree", "Strongly disagree", "Disagree", "Agree", "Strongly Agree", "Very strongly agree"))
items <- list(c("Q1", "Q2", "Q3", "Q4", "Q5"))
source("sjPlotLikert.R")
sjp.likert(likert_6, legendLabels=levels_6, barColor="brown", axisLabels.x=items, orderBy="pos")
??plotBarchartTable
library(devtools)
install_github('irutils','jbryer')
library(irutils)
library(ggplot2)
data(pisa)
items29 = pisa[,substr(names(pisa), 1,5) == 'ST25Q']
names(items29) = c("Magazines", "Comic books", "Fiction", "Non-fiction books", "Newspapers")
for(i in 1:ncol(items29)) {
items29[,i] = factor(items29[,i], levels=1:5,
labels=c('Never or almost never', 'A few times a year', 'About once a month',
'Several times a month', 'Several times a week'), ordered=TRUE)
}
data(pisa)
items29 = pisa[,substr(names(pisa), 1,5) == 'ST25Q']
names(items29) = c("Magazines", "Comic books", "Fiction", "Non-fiction books", "Newspapers")
for(i in 1:ncol(items29)) {
items29[,i] = factor(items29[,i], levels=1:5,
labels=c('Never or almost never', 'A few times a year', 'About once a month',
'Several times a month', 'Several times a week'), ordered=TRUE)
}
plotHeatmapTable
?plotHeatmapTable
??plotHeatmapTable
require(devtools)
install_github('likert','jbryer')
library(likert)
shinyLikert()
require(shiny)
#library(pisa)
require(devtools)
#install_github('likert','kspeer')
require(likert)
data(pisaitems)
#source('C:/Users/User/Dropbox/Github/likert/R/xtable.likert.R')#rm this when github syncs
items24 <- pisaitems[,substr(names(pisaitems), 1,5) == 'ST24Q']
items24 <- rename(items24, c(
ST24Q01="I read only if I have to.",
ST24Q02="Reading is one of my favorite hobbies.",
ST24Q03="I like talking about books with other people.",
ST24Q04="I find it hard to finish books.",
ST24Q05="I feel happy if I receive a book as a present.",
ST24Q06="For me, reading is a waste of time.",
ST24Q07="I enjoy going to a bookstore or a library.",
ST24Q08="I read only to get information that I need.",
ST24Q09="I cannot sit still and read for more than a few minutes.",
ST24Q10="I like to express my opinions about books I have read.",
ST24Q11="I like to exchange books with my friends."))
l24 = likert(items24)
l24g <- likert(items24, grouping=pisaitems$CNT)
items29 <- pisaitems[,substr(names(pisaitems), 1,5) == 'ST25Q']
names(items29) = c("Magazines", "Comic books", "Fiction", "Non-fiction books", "Newspapers")
l29 <- likert(items29)
l29g <- likert(items29, grouping=pisaitems$CNT)
# Define server logic
shinyServer(function(input, output) {
# Return the requested dataset #TODO have this switch between pisa items
datasetInput <- reactive({
switch(input$dataset,
"l24" = l24,
"l29" = l29)
})
# Generate a summary of the dataset
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset,
center=input$center,
ordered=input$ordered)
})
output$print<-renderTable({
dataset<-datasetInput()
print(dataset)
})
#   output$table<-renderTable({
#     dataset<-datasetInput()
#     xtab<-xtable(dataset)
#     print(xtab, include.rownames=FALSE)
#   })
#   output$table<-renderTable({
#     datasetInput()
#   },
#                             caption=input$caption,
#                             include.rownames=FALSE,
#                             include.n=input$include.n,
#                             include.mean=input$include.mean,
#                             include.sd=input$include.sd,
#                             include.low=input$include.low,
#                             include.neutral=input$include.neutral,
#                             include.high=input$include.high,
#                             include.missing=input$include.missing
#                             #include.levels=input$include.levels
#                             )
output$table<-renderTable({
dataset <- datasetInput()
xtab<-xtable(dataset,
caption=input$caption,
include.n=input$include.n,
include.mean=input$include.mean,
include.sd=input$include.sd,
include.low=input$include.low,
include.neutral=input$include.neutral,
include.high=input$include.high,
include.missing=input$include.missing,
center=input$center,
ordered=input$ordered
#include.levels=input$include.levels
)
xtab
})
#add ,caption.placement='top',include.rownames=FALSE
output$plot <- renderPlot({
dataset <- datasetInput()
p<-plot(dataset,
include.center=input$include.center,
centered=input$centered,
ordered=input$ordered,
center=input$center,
wrap=input$wrap
)
print(p)
})
})
library(shiny)
# Define UI for application
shinyUI(pageWithSidebar(
# Application title
headerPanel("likert Demo"),
#
sidebarPanel(#TODO read in defaults rather than setting
selectInput("dataset", "Select an Item:",
choices=c('l24','l29')),
checkboxInput("include.center", "Include center", TRUE),
checkboxInput("centered", "Centered", TRUE),
checkboxInput("ordered", "Ordered", TRUE),
numericInput("center", "Center", 3, step=0.5),#TODO generalize based on default
numericInput("wrap", "Length of wrapped text", 30),
textInput('caption','Table Caption:','This is a table.'),#may have to wrap xtable for reactivity here
checkboxInput('include.n','Include n',TRUE),
checkboxInput('include.mean','Include mean',TRUE),
checkboxInput('include.sd','Include sd',TRUE),
checkboxInput('include.low','Include low',TRUE),
checkboxInput('include.neutral','Include neutral',TRUE),
checkboxInput('include.high','Include high',TRUE),
checkboxInput('include.missing','Include missing',TRUE)
),
# Show a tabset that includes a plot, summary, and table view
# of the generated distribution
mainPanel(
tabsetPanel(
tabPanel("Plot", plotOutput("plot")),
tabPanel("Summary", verbatimTextOutput("summary")),
tabPanel("Print", tableOutput('print')),
tabPanel("Table", tableOutput('table'))
)
)
))
shinyLikert()
shinyLikert()
levels <- c('Strongly Disagree', 'Disagree', 'Neither', 'Agree', 'Strongly Agree')
test <- factor(sample(levels[1:5], 10, replace=TRUE))
test
#' Convert Factor Leves to Strings
#'
#' @param x a factor vector whose levels will become strings.
#' @export
#' @examples
#' mylevels <- c('Strongly Disagree', 'Disagree', 'Neither', 'Agree', 'Strongly Agree')
#' myvar <- factor(sample(mylevels[1:5], 10, replace=TRUE))
#' destring(myvar)
destring <- function(x) {
## convert factor to strings
if (is.character(x)) {
as.numeric(x)
} else if (is.factor(x)) {
as.numeric(levels(x))[x]
} else if (is.numeric(x)) {
x
} else {
stop("could not convert to numeric")
}
}
destring(test)
test
destring <- function(x) {
## convert factor to strings
if (is.character(x)) {
as.numeric(x)
} else if (is.factor(x)) {
as.numeric(levels(x))[x]
} else if (is.numeric(x)) {
invisible(x)
} else {
stop("could not convert to numeric")
}
}
destring(test)
as.integer(destring(test)))
as.integer(destring(test))
mylevels <- c('Strongly Disagree', 'Disagree', 'Neither', 'Agree', 'Strongly Agree')
myvar <- factor(sample(mylevels[1:5], 10, replace=TRUE))
destring(myvar)
str(myvar)
destring <- function(x) {
## convert factor to strings
if (is.character(x)) {
as.numeric(x)
} else if (is.factor(x)) {
as.numeric(levels(x))[[x]]
} else if (is.numeric(x)) {
invisible(x)
} else {
stop("could not convert to numeric")
}
}
str(myvar)
destring(myvar)
destring <- function(x) {
## convert factor to strings
if (is.character(x)) {
as.numeric(x)
} else if (is.factor(x)) {
as.numeric(levels(x))[x]
} else if (is.numeric(x)) {
invisible(x)
} else {
stop("could not convert to numeric")
}
}
levels(myvar))[x]
levels(myvar)[x]
levels(myvar)[myvar]
(levels(myvar)[myvar])
as.numeric(levels(myvar)[myvar])
as.numeric(levels(myvar))[myvar]
as.numeric(as.character(levels(myvar))[myvar]
)
as.numeric(as.character(levels(myvar)))[myvar]
destring <- function(x) {
## convert factor to strings
if (is.character(x)) {
as.numeric(x)
} else if (is.factor(x)) {
as.numeric(as.character(x))[x]
} else if (is.numeric(x)) {
invisible(x)
} else {
stop("could not convert to numeric")
}
}
destring(myvar)
destring <- function(x) {
## convert factor to strings
if (is.character(x)) {
as.numeric(x)
} else if (is.factor(x)) {
as.numeric(as.character(x))
} else if (is.numeric(x)) {
invisible(x)
} else {
stop("could not convert to numeric")
}
}
destring(myvar)
destring <- function(x) {
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
## convert factor to strings
if (is.character(x)) {
as.numeric(x)
} else if (is.factor(x)) {
as.numeric.factor(x)
} else if (is.numeric(x)) {
invisible(x)
} else {
stop("could not convert to numeric")
}
}
destring(myvar)
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
as.numeric.factor (myvar)
as.numeric.factor(myvar)
myvar
str(myvar)
as.numeric.factor(myvar)
a<-as.numeric.factor(myvar)
a
FinalDataRe <- data.frame(A='3434  ', B ='4343 ', C = '-34  ', D = '343434 -', E='535', stringsAsFactors = FALSE)
FinalDataRe
destring <- function(x) as.numeric(gsub("[[:space:]]|-\\s*$", "", x))
minus_fixes <- c('', ifelse(sapply(FinalDataRe[1,-length(FinalDataRe)], grepl, pattern = '-\\s*$'), '-', ''))
minus_fixes
FinalDataRe[1, ] <- Map(paste0, minus_fixes,  FinalDataRe[1, ])
FinalDataRe
FinalDataR <- data.frame(lapply(FinalDataRe, destring))
FinalDataR
as.numeric(as.character(myvar))
myvar
UK<-data.frame(
Year =	c(1945,1950,1951,1955,1959,1964,1966,1970,1974F,1974O,1979,1983,1987,1992,1997,2001,2005,2010),
Cons = c(215	298	321	345	365	303	253	322	296	276	339	397	375	336	165	166	198	306),
Lab	= c(395	315	295	277	258	317	363	288	302	319	268	209	229	271	418	412	355	258),
Lib =	c(12	9	6	6	6	9	12	6	14	13	11	23	22	20	46	52	62	57),
Other	= c(18	3	3	2	1	13	2	14	23	27	17	21	24	24	30	29	31	28),
ps_Cons	= c(33.59,47.68,51.36,54.76,57.94,48.09,40.17,51.11,46.61,43.46,53.39,61.08,57.69,51.61,25.04,25.2,30.65,47.08),
ps_Lab	= c(61.72,50.4,47.2,43.97,40.95,50.32,57.62,45.72,47.56,50.24,42.2,32.15,35.23,41.63,63.43,62.5,54.95,39.69),
ps_Lib =	c(1.88,1.44,0.96,0.95,0.95,1.43,1.9,0.95,2.2,2.05,1.73,3.54,3.39,3.07,6.98	7.9,9.6,8.77),
ps_Other = c(2.81,0.48,0.48,0.32,0.16,0.16,0.31,2.22,3.63,4.25,2.67,3.23,3.69,3.69,4.55,4.40,4.8,4.46),
pv_Cons	= c(40.26,43.44,47.97,49.74,49.36,41.84,40.49,44.89,37.77,35.73,43.87,42.44,42.23,41.93,30.66,31.7,32.36,36.05),
pv_Lab	= c(47.88,46.11,48.78,46.21,43.68,43.76,47.65,42.68,37.22,39.25,36.85,27.58,30.84,34.39,43.21,40.7,35.19,28.99),
pv_Lib = c(8.99,9.11,2.55,2.72,5.89,11.2,8.54,7.47,19.34,18.32,13.82,25.38,22.54,17.85,16.76,18.3,22.05,23.03),
pv_Other	= c(2.87,
UK<-data.frame(
Year =	c(1945,1950,1951,1955,1959,1964,1966,1970,"1974F","1974O",1979,1983,1987,1992,1997,2001,2005,2010),
Cons = c(215	298	321	345	365	303	253	322	296	276	339	397	375	336	165	166	198	306),
Lab	= c(395	315	295	277	258	317	363	288	302	319	268	209	229	271	418	412	355	258),
Lib =	c(12	9	6	6	6	9	12	6	14	13	11	23	22	20	46	52	62	57),
Other	= c(18	3	3	2	1	13	2	14	23	27	17	21	24	24	30	29	31	28),
ps_Cons	= c(33.59,47.68,51.36,54.76,57.94,48.09,40.17,51.11,46.61,43.46,53.39,61.08,57.69,51.61,25.04,25.2,30.65,47.08),
ps_Lab	= c(61.72,50.4,47.2,43.97,40.95,50.32,57.62,45.72,47.56,50.24,42.2,32.15,35.23,41.63,63.43,62.5,54.95,39.69),
ps_Lib =	c(1.88,1.44,0.96,0.95,0.95,1.43,1.9,0.95,2.2,2.05,1.73,3.54,3.39,3.07,6.98	7.9,9.6,8.77),
ps_Other = c(2.81,0.48,0.48,0.32,0.16,0.16,0.31,2.22,3.63,4.25,2.67,3.23,3.69,3.69,4.55,4.40,4.8,4.46),
pv_Cons	= c(40.26,43.44,47.97,49.74,49.36,41.84,40.49,44.89,37.77,35.73,43.87,42.44,42.23,41.93,30.66,31.7,32.36,36.05),
pv_Lab	= c(47.88,46.11,48.78,46.21,43.68,43.76,47.65,42.68,37.22,39.25,36.85,27.58,30.84,34.39,43.21,40.7,35.19,28.99),
pv_Lib = c(8.99,9.11,2.55,2.72,5.89,11.2,8.54,7.47,19.34,18.32,13.82,25.38,22.54,17.85,16.76,18.3,22.05,23.03),
pv_Other	= c(2.87,1.34,0.7,1.33,1.07,3.2,3.31,4.95,5.67,6.7,5.46,4.60,4.39,5.83,9.37,9.3,10.4,11.93) )
UK<-data.frame(
Year =	c(1945,1950,1951,1955,1959,1964,1966,1970,1974,1974,1979,1983,1987,1992,1997,2001,2005,2010),
Cons = c(215	298	321	345	365	303	253	322	296	276	339	397	375	336	165	166	198	306),
Lab	= c(395	315	295	277	258	317	363	288	302	319	268	209	229	271	418	412	355	258),
Lib =	c(12	9	6	6	6	9	12	6	14	13	11	23	22	20	46	52	62	57),
Other	= c(18	3	3	2	1	13	2	14	23	27	17	21	24	24	30	29	31	28),
ps_Cons	= c(33.59,47.68,51.36,54.76,57.94,48.09,40.17,51.11,46.61,43.46,53.39,61.08,57.69,51.61,25.04,25.2,30.65,47.08),
ps_Lab	= c(61.72,50.4,47.2,43.97,40.95,50.32,57.62,45.72,47.56,50.24,42.2,32.15,35.23,41.63,63.43,62.5,54.95,39.69),
ps_Lib =	c(1.88,1.44,0.96,0.95,0.95,1.43,1.9,0.95,2.2,2.05,1.73,3.54,3.39,3.07,6.98	7.9,9.6,8.77),
ps_Other = c(2.81,0.48,0.48,0.32,0.16,0.16,0.31,2.22,3.63,4.25,2.67,3.23,3.69,3.69,4.55,4.40,4.8,4.46),
pv_Cons	= c(40.26,43.44,47.97,49.74,49.36,41.84,40.49,44.89,37.77,35.73,43.87,42.44,42.23,41.93,30.66,31.7,32.36,36.05),
pv_Lab	= c(47.88,46.11,48.78,46.21,43.68,43.76,47.65,42.68,37.22,39.25,36.85,27.58,30.84,34.39,43.21,40.7,35.19,28.99),
pv_Lib = c(8.99,9.11,2.55,2.72,5.89,11.2,8.54,7.47,19.34,18.32,13.82,25.38,22.54,17.85,16.76,18.3,22.05,23.03),
pv_Other	= c(2.87,1.34,0.7,1.33,1.07,3.2,3.31,4.95,5.67,6.7,5.46,4.60,4.39,5.83,9.37,9.3,10.4,11.93) )
data <- data.frame(
id=as.factor(1:100),
a=as.factor(sample(1:10, size=100, replace=TRUE)),
b=as.factor(sample(1:10, size=100, replace=TRUE)),
c=as.factor(sample(1:10, size=100, replace=TRUE)),
d=as.factor(sample(1:10, size=100, replace=TRUE)),
e=as.factor(sample(1:10, size=100, replace=TRUE))
)
data
ABCD<- c("b", "c", "d")
DEC<-c("e", "C");
BC<-c("c", "d", "e")
ABE <- ("b","c","e")
ABCD<- c("b", "c", "d")
DEC<-c("e", "c")
BC<-c("c", "d", "e")
ABE <- c("b","c","e")
party_chains <-structure(list(ABCD,DEC,BC,ABE), .Names = c("ABCD","DEC","BC","ABE"));
SciencesPo::fptp2av(data=data,link=party_chains)
SciencesPo::fptp2av
setwd('/Users/daniel/Temp')
files <- list.files(pattern = "[.]csv$")
read.all <- lapply(files, read.table, sep=",", header = TRUE)
data1 <- do.call(rbind, read.all)
uk_sim <- do.call(rbind, read.all)
require(SciencesPo)
detail(uk_sim)
table(uk_sim$District)
files <- list.files(pattern = "[.]csv$")
read.all <- lapply(files, read.table, sep=",", header = TRUE)
uk_sim <- do.call(rbind, read.all)
table(uk_sim$District)
detail(uk_sim)
sqr(6779.2)
sqrt(6779.2)
sqrt(6779.2)
table(UK$Outcome)
table(uk_sim$Outcome)
table(uk_sim$Outcome)/100
plot(uk_sim$Outcome)
plot(uk_sim$Outcome)/100
plot(uk_sim$Outcome/100)
plot(uk_sim$Outcome)
plot(uk_sim$Outcome)
8689/56311
require(SoundexBR)
soundexBR("clair")
soundexBR("claire")
soundexBR("claire")
soundexBR("Carolina")
soundexBR("Karolina")
soundexBR("Rubin")
soundexBR("Rubson")
soundexBR("Robson")
soundexBR("Rubens")
soundexBR("Rubem")
soundexBR("Rubems")
soundexBR("Ashcroft")
soundexBR("Ashcraft")
soundexBR("Rosana")
soundexBR("Hosana")
soundexBR("Maria")
